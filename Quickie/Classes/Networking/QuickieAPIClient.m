//  QuickieAPIClient.m
//
//  Generated by the the JBoss AeroGear Xcode Project Template on 6/7/13.
//  See Project's web site for more details http://www.aerogear.org
//

#import "QuickieAPIClient.h"

static NSString * const kQuickieAPIBaseURLString = @"http://todo-aerogear.rhcloud.com/todo-server/";

@implementation QuickieAPIClient

@synthesize tasksPipe = _tasksPipe;

+ (QuickieAPIClient *)sharedInstance {
    static QuickieAPIClient *_sharedInstance = nil;
    static dispatch_once_t onceToken;
    dispatch_once(&onceToken, ^{
        _sharedInstance = [[self alloc] init];
    });

    return _sharedInstance;
}

- (void)loginWithUsername:(NSString *)username
                 password:(NSString *)password
                  success:(void (^)())success
                  failure:(void (^)(NSError *error))failure {

    NSURL *baseURL = [NSURL URLWithString:kQuickieAPIBaseURLString];

    // create the Pipeline object
    AGPipeline *pipeline = [AGPipeline pipelineWithBaseURL:baseURL];

    // create the Authenticator object
    AGAuthenticator *authenticator = [AGAuthenticator authenticator];

    // request the default 'AeroGear' authentication module from 'Authenticator'
    id<AGAuthenticationModule> todoAuthMod = [authenticator auth:^(id<AGAuthConfig> config) {
        [config setName:@"todoAuthMod"]; // assign it a name
        [config setBaseURL:baseURL]; // the base url to authenticate to
        [config setType:@"AG_SECURITY"]; // can be omitted as 'AG_SECURITY' is the default auth module
    }];

    // login to the service
    [todoAuthMod login:username password:password success:^(id object) {
        // if successfully logged in, it is time to construct our pipes.
        // Note that we assign the authentication module we
        // created earlier, so every request can be properly
        // authenticated against the remote endpoints.
        _tasksPipe = [pipeline pipe:^(id<AGPipeConfig> config) {
            [config setName:@"tasks"];
            [config setAuthModule:todoAuthMod];
        }];

        // ..add your own pipes here

        // inform client that we have successfully logged in
        success();

    } failure:^(NSError *error) {
        failure(error);
    }];
}
@end
